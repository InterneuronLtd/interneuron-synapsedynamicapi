# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- aws-development

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '66fc4838-8299-494e-bd53-04dfd3d4d77b'
  imageRepository: 'dynamicapi'
  containerRegistry: 'interneurondev.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - script: |
       echo "$(Build.SourcesDirectory)"
       dotnet publish $(Build.SourcesDirectory)/SynapseDynamicAPI/SynapseDynamicAPI/SynapseDynamicAPI.csproj --output $(Build.BuildId)
       echo $(Build.BuildId)
       cp SynapseDynamicAPI/SynapseDynamicAPI/Dockerfile .
       cp -r $(Build.SourcesDirectory)/$(Build.BuildId) buildfolder
      displayName: 'building the code'
    - script: |
       grep --include={*.json,*.ts} -rl 'AUTONOMIC_URI' * | xargs -i@ sed -i 's/AUTONOMIC_URI/https:\/\/autonomic.dev.interneuron.io/g' @;
       grep --include={*.json,*.ts} -rl 'SYNAPSE_IDENTITY_URI' * | xargs -i@ sed -i 's/SYNAPSE_IDENTITY_URI/https:\/\/synapseidentityserver.dev.interneuron.io/g' @;
       grep --include={*.json,*.ts} -rl 'SYNAPSE_DYNAMIC_URI' * | xargs -i@ sed -i 's/SYNAPSE_DYNAMIC_URI/https:\/\/dynamicapi.azuredev.interneuron.io/g' @;
       grep --include={*.json,*.ts} -rl 'TERMINOLOGY_URI' * | xargs -i@ sed -i 's/TERMINOLOGY_URI/https:\/\/terminologyapi.azuredev.interneuron.io/g' @;
       grep --include={*.json,*.ts} -rl 'SYNAPSE_STUDIO_WEB_URI' * | xargs -i@ sed -i 's/SYNAPSE_STUDIO_WEB_URI/https:\/\/synapse.dev.interneuron.io\/studioweb/g' @;
       grep --include={*.json,*.ts} -rl 'CARERECORD_URI' * | xargs -i@ sed -i 's/CARERECORD_URI/https:\/\/carerecordapi.azuredev.interneuron.io/g' @;
       grep --include={*.json,*.ts} -rl 'DOCUMENT_API_URI' * | xargs -i@ sed -i 's/DOCUMENT_API_URI/https:\/\/synapsedocumentsapi.dev.interneuron.io/g' @;
       grep --include={*.json,*.ts} -rl 'FDB_API_URI' * | xargs -i@ sed -i 's/FDB_API_URI/https:\/\/fdbapi.dev.interneuron.io/g' @;
       grep --include={*.json,*.ts} -rl 'SYNAPSE_STUDIO_URI' * | xargs -i@ sed -i 's/SYNAPSE_STUDIO_URI/https:\/\/synapse.dev.interneuron.io/g' @;
       grep --include={*.json,*.ts} -rl 'TERMINUS_URI' * | xargs -i@ sed -i 's/TERMINUS_URI/https:\/\/terminus.azuredev.interneuron.io/g' @;
       grep --include={*.json,*.ts} -rl 'TERMINUS_BUCKET_URI' * | xargs -i@ sed -i 's/TERMINUS_BUCKET_URI/https:\/\/test-terminus-modules-bucket.s3.ap-south-1.amazonaws.com/g' @;
       grep --include={*.json,*.ts} -rl 'SYNAPSE_PLATFORM_SERVICES_API' * | xargs -i@ sed -i 's/SYNAPSE_PLATFORM_SERVICES_API/https:\/\/synapseplatformservices.dev.interneuron.io/g' @;
       grep --include={*.json,*.ts} -rl 'NOTIFICATION_API_URI' * | xargs -i@ sed -i 's/NOTIFICATION_API_URI/https:\/\/notificationapi.dev.interneuron.io/g' @;
       grep --include={*.json,*.ts} -rl 'WEB_NOTIFIER_URI' * | xargs -i@ sed -i 's/WEB_NOTIFIER_URI/https:\/\/webnotifier.dev.interneuron.io/g' @;
       grep --include={*.json,*.ts} -rl 'SMS_NOTIFICATION_URI' * | xargs -i@ sed -i 's/SMS_NOTIFICATION_URI/https:\/\/notificationsms.dev.interneuron.io/g' @;
       grep --include={*.json,*.ts} -rl 'EMAIL_NOTIFICATION_URI' * | xargs -i@ sed -i 's/EMAIL_NOTIFICATION_URI/https:\/\/notificationemail.dev.interneuron.io/g' @;
       grep --include={*.json,*.ts} -rl 'ELASTIC_SEARCH_URL' * | xargs -i@ sed -i 's/ELASTIC_SEARCH_URL/https:\/\/es.dev.interneuron.io:9200/g' @;
       grep --include={*.json,*.ts} -rl 'POSTGRES_MMC_DB_CONNECTION_STRING' * | xargs -i@ sed -i 's/POSTGRES_MMC_DB_CONNECTION_STRING/Server=dev-interneuron-db.postgres.database.azure.com;User Id=interneuron_slam_test;Password=$(POSTGRES_PASSWORD);Database=mmc_dev_playground;Port=5432;/g' @;
       grep --include={*.json,*.ts} -rl 'POSTGRES_SYNAPSE_DB_CONNECTION_STRING' * | xargs -I@ sed -i 's#POSTGRES_SYNAPSE_DB_CONNECTION_STRING#Server=dev-interneuron-db.postgres.database.azure.com;User Id=interneuron_slam_test;Password=$(POSTGRES_PASSWORD);Database=DEV_synapse;Port=5432;#g' @
       grep --include={*.json,*.ts} -rl 'POSTGRES_SYNAPSE_IDENTITY_DB_CONNECTION_STRING' * | xargs -i@ sed -i 's#POSTGRES_SYNAPSE_IDENTITY_DB_CONNECTION_STRING#Server=interneuron-ind-db-test.cjdliyabgdwt.ap-south-1.rds.amazonaws.com;User Id=Inddbtestadmin;Password=$(POSTGRES_IDENTITY_PASSWORD);Database=DEV_synapseidentity;Port=5432;#g' @;
       grep --include={*.json,*.ts} -rl 'FDB_DATABASE_CONNECTION_STRING' * | xargs -i@ sed -i 's/FDB_DATABASE_CONNECTION_STRING/Data Source=ec2-3-109-97-232.ap-south-1.compute.amazonaws.com,1433\MSSQLSERVER_2017;Initial Catalog=multilexfdb_30092020;uid=sa;password=$(FDB_PASSWORD);/g' @;
       grep --include={*.json,*web.config} -rl 'POSTGRES_SERVERNAME' * | xargs -i@ sed -i 's/POSTGRES_SERVERNAME/dev-interneuron-db.postgres.database.azure.com/g' @;
       grep --include={*.json,*web.config} -rl 'POSTGRES_PASSWORD' * | xargs -i@ sed -i 's/POSTGRES_PASSWORD/$(POSTGRES_PASSWORD)/g' @;
       grep --include={*.json,*web.config} -rl 'POSTGRES_USERID' * | xargs -i@ sed -i 's/POSTGRES_USERID/interneuron_slam_test/g' @;
       grep --include={*.json,*web.config} -rl 'POSTGRES_PORT' * | xargs -i@ sed -i 's/POSTGRES_PORT/5432/g' @;
       grep --include={*.json,*Web.config} -rl 'IDENTITY_DATABASE_NAME' * | xargs -i@ sed -i 's/IDENTITY_DATABASE_NAME/DEV_synapseidentity/g' @;
       grep --include={*.json,*Web.config} -rl 'SYNAPSE_DATABASE_NAME' * | xargs -i@ sed -i 's/SYNAPSE_DATABASE_NAME/DEV_synapse/g' @;
       grep --include={*.json,*Web.config} -rl 'MMC_DATABASE_NAME' * | xargs -i@ sed -i 's/MMC_DATABASE_NAME/mmc_dev_playground/g' @;
       grep --include={*.json,*.ts} -rl 'NHSDigitalIntegration_API_URL' * | xargs -i@ sed -i 's/NHSDigitalIntegration_API_URL/https:\/\/nhsdigitalintegration.dev.interneuron.io/g' @;
      displayName: 'content replacement'

    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: AzureContainerApps@1
      inputs:
        azureSubscription: 'Interneuron PAYG Dev/Test (6155a2f7-abb5-42b5-be77-6bb0841cf690)'
        imageToDeploy: 'interneurondev.azurecr.io/dynamicapi:$(Build.BuildId)'
        containerAppName: 'dynamicapi'
        resourceGroup: 'arghya-test'
